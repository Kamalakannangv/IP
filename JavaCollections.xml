<?xml version="1.0" encoding="utf-8"?>
<JavaCollection>
<Iterable type="interface" defÃ¯nition="Implementing this interface allows an object to be the target of the foreach statement">
<Collection type="interface" definition="A collection represents a group of objects, known as its elements">
<List type="interface" definition="An ordered collection, user has precise control over where in the list each element is inserted, can access elements by their integer index">
<ArrayList type="class" definition="Resizable-array implementation of the List interface" thread-safe="No" performance="Get and set operations are better than LinkedList" iterator="fail-fast" extends="AbstractList">
</ArrayList>
<Vector type="class" definition="Vector class implements a growable array of objects. Like an array, it contains components that can be accessed using an integer index" thread-safe="Yes" feature="Vector each time doubles its array size, while ArrayList grow 50% of its size each time" iterator="fail-fast" enumerations="Not fail-fast" extends="AbstractList">
</Vector>
<LinkedList type="class" definition="Linked list implementation of the List interface" thread-safe="No" performance="1. Insertion, Removal better than ArrayList, 2. More memory overhead than ArrayList" feature="Provides uniformly named methods to get, remove and insert an element at the beginning and end of the list" iterator="fail-fast" other-impl="Deque" extends="AbstractSequentialList">
</LinkedList>
</List>
<Set type="interface" definition="A collection that contains no duplicate elements">
<SortedSet type="interface" definition="A Set that further provides a total ordering on its elements. The elements are ordered using their Comparable natural ordering, or by a Comparator typically provided at sorted set creation time">
<NavigableSet type="interface" definition="A SortedSet extended with navigation methods reporting closest matches for given search targets" feature="1. Methods lower, floor, ceiling, and higher return elements respectively less than, less than or equal, greater than or equal, and greater than a given element, returning null if there is no such element, 2. A NavigableSet may be accessed and traversed in either ascending or descending order">
<TreeSet type="class" definition="A NavigableSet implementation based on a TreeMap" thread-safe="No" performance="TreeSet is bit slower compared to HashSet and LinkedHashSet because of sorting operation it needs to perform on each insertion" null-acceptence="No, throws NullPointerException when null is inserted" For-Uniqueness="compareTo()[Comparable] or compare()[Comparator] method" iterator="fail-fast" feature="1. The elements are ordered using their Comparable natural ordering, or by a Comparator provided at set creation time, depending on which constructor is used" extends="AbstractSet">
</TreeSet>
</NavigableSet>
</SortedSet>
<HashSet type="class" definition="This class implements the Set interface, backed by a hash table (actually a HashMap instance)" thread-safe="No" performance="1. This class offers constant time performance for the basic operations (add, remove, contains and size), assuming the hash function disperses the elements properly among the buckets, 2.  Iterating over this set requires time proportional to the sum of the HashSet instance's size (the number of elements) plus the capacity of the backing HashMap instance (the number of buckets)" null-acceptence="Yes" For-Uniqueness="equals() method" iterator="fail-fast" extends="AbstractSet">
<LinkedHashSet type="class" definition="Hash table and linked list implementation of the Set interface, with predictable iteration order" thread-safe="No" performance="1.  Iteration over a LinkedHashSet requires time proportional to the size of the set, regardless of its capacity, 2. Almost same as HashSet but better than TreeSet " null-acceptence="Yes" For-Uniqueness="equals() method" iterator="fail-fast">
</LinkedHashSet>
</HashSet>
</Set>
<Queue type="interface" definition="A collection designed for holding elements prior to processing" feature="Provide additional insertion , extraction , and inspection operations - offer(), poll() and peek()">
<Deque type="interface" definition="A linear collection that supports element insertion and removal at both ends"/>
<PriorityQueue type="class" definition="An unbounded priority queue based on a priority heap" thread-safe="No" null-acceptence="No" extends="AbstractQueue"/>
</Queue>
</Collection>
</Iterable>
<Map type="interface" definition="An object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value">
<SortedMap>
<NavigableMap>
<TreeMap type="class" definition="A Red-Black tree based NavigableMap implementation. The map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used" thread-safe="No" performance="TreeMap is bit slower compared to HashMap and LinkedHashMap because of sorting operation it needs to perform on each insertion" null-acceptence="can not contain null keys but may contain many null values" For-Key-Uniqueness="compareTo()[Comparable] or compare()[Comparator] method" iterator="fail-fast" extends="AbstractMap">
</TreeMap>
</NavigableMap>
</SortedMap>
<HashMap type="class" definition="Hash table based implementation of the Map interface" thread-safe="No" performance="1. Provides constant-time performance for the basic operations (get and put), assuming the hash function disperses the elements properly among the buckets, 2. Iteration over collection views requires time proportional to the capacity of the HashMap instance (the number of buckets) plus its size (the number of key-value mappings)" null-acceptence="Yes" For-Key-Uniqueness="equals()" iterator="fail-fast" extends="AbstractMap">
<LinkedHashMap type="class" definition="Hash table and linked list implementation of the Map interface, with predictable iteration order" thread-safe="No" performance="Iteration over the collection-views of a LinkedHashMap requires time proportional to the size of the map, regardless of its capacity" null-acceptence="Yes" For-Key-Uniqueness="equals()" iterator="fail-fast"/>
</HashMap>
<ConcurrentMap type="interface" definition="A Map providing additional atomic putIfAbsent, remove, and replace methods">
</ConcurrentMap>
</Map>
<OtherAbstractClass>
<AbstractCollection type="abstract" definition="This class provides a skeletal implementation of the Collection interface, to minimize the effort required to implement this interface"/>
<AbstractList type="abstract" definition="This class provides a skeletal implementation of the List interface to minimize the effort required to implement this interface backed by a 'random's access data store (such as an array)." extends="AbstractCollection"/>
<AbstractSequentialList type="abstract" definition="This class provides a skeletal implementation of the List interface to minimize the effort required to implement this interface backed by a 'sequential access' data store (such as a linked list)"/>
<AbstractSet type="abstract" definition="This class provides a skeletal implementation of the Set interface to minimize the effort required to implement this interface" extends="AbstractCollection"/>
<AbstractQueue type="abstract" definition="This class provides skeletal implementations of some Queue operations" extends="AbstractCollection"/>
<AbstractMap type="abstract" definition="This class provides a skeletal implementation of the Map interface, to minimize the effort required to implement this interface"/>
</OtherAbstractClass>
</JavaCollection>




















